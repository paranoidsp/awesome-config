-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
awful.rules = require("awful.rules")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
beautiful.init(awful.util.getdir("config") .. "/themes/copland/theme.lua")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
--FreeDesktop
require('freedesktop.utils')
require('freedesktop.menu')
freedesktop.utils.icon_theme = 'gnome'
--Vicious + Widgets 
vicious = require("vicious")
local wi = require("wi")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- This is used later as the default terminal and editor to run.
terminal = "gnome-terminal"
browser = "google-chrome"
editor = os.getenv("EDITOR") or "vim"
editor_cmd = terminal .. " -e " .. editor
browser_cmd = terminal .. " -e " .. browser

-- Setting Cairo compmgr for transparency
function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
end
run_once("compton -cGb")
--awful.client.movetotag("⌘:Conky")
lain.layout.termfair.nmaster   = 3
lain.layout.termfair.ncol      = 1
lain.layout.centerfair.nmaster = 3
lain.layout.centerfair.ncol    = 1

-- {{{ Naughty presets
--naughty.config.defaults.timeout = 5
--naughty.config.defaults.screen = 1
--naughty.config.defaults.position = "top_right"
--naughty.config.defaults.margin = 8
--naughty.config.defaults.gap = 1
--naughty.config.defaults.ontop = true
--naughty.config.defaults.font = "terminus 6"
--naughty.config.defaults.icon = nil
--naughty.config.defaults.icon_size = 256
--naughty.config.defaults.fg = beautiful.fg_tooltip
--naughty.config.defaults.bg = beautiful.bg_tooltip
--naughty.config.defaults.border_color = beautiful.border_tooltip
--naughty.config.defaults.border_width = 2
--naughty.config.defaults.hover_timeout = nil
-- -- }}}
-- Making the notifications transparent.
naughty.config.presets.normal.opacity = 0.6
naughty.config.presets.low.opacity = 0.6
naughty.config.presets.critical.opacity = 0.6

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"
modkey2 = "Mod1"

-- Table of layouts to cover with awful.layout.inc, order matters.
--local layouts =
--{
local layouts = {
    awful.layout.suit.floating,
    awful.layout.suit.fair,
    awful.layout.suit.tile,
    lain.layout.uselessfair.horizontal,
    lain.layout.uselesstile,
    lain.layout.uselessfair,
    lain.layout.termfair,
    lain.layout.centerfair,
    lain.layout.uselesspiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}

-- }}}

-- {{{ Naughty presets
naughty.config.defaults.timeout = 5
naughty.config.defaults.screen = 1
naughty.config.defaults.position = "top_right"
naughty.config.defaults.margin = 8
naughty.config.defaults.gap = 1
naughty.config.defaults.ontop = true
naughty.config.defaults.font = "terminus 8"
naughty.config.defaults.icon = nil
naughty.config.defaults.icon_size = 256
naughty.config.defaults.fg = beautiful.fg_tooltip
naughty.config.defaults.bg = beautiful.bg_tooltip
naughty.config.defaults.border_color = beautiful.border_tooltip
naughty.config.defaults.border_width = 2
naughty.config.defaults.hover_timeout = nil
-- -- }}}

-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.maximized(beautiful.wallpaper, s, true)
    end
end
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {
 names  = { 
         --'☭:IRC',
         --'⚡:Luakit', 
         '☢', 
         '☣',  
         '♬',
         --'☃:Vbox', 
         '⌥', 
         '☯',
         --'✣:Facepalm',
           },
 layout = {
      --layouts[5],   -- 1:irc
      --layouts[10],  -- 2:luakit
      layouts[10],  -- 3:chrome
      layouts[1],  -- 4:gvim
      layouts[10],  -- n:clementine
      --layouts[2],   -- 5:vbox
      layouts[10],  -- 6:multimedia
      --layouts[10],  -- 7:conky
      layouts[2],   -- 8:ide
      --layouts[10],  -- 9:facepalm
          }
       }
  for s = 1, screen.count() do
 -- Each screen has its own tag table.
 tags[s] = awful.tag(tags.names, s, tags.layout)
 end
-- }}}

-- Wallpaper Changer Based On 
-- menu icon menu pdq 07-02-2012
 --local wallmenu = {}
 --local function wall_load(wall)
 --local f = io.popen('ln -sfn ' .. home_path .. '.config/awesome/wallpaper/' .. wall .. ' ' .. home_path .. '.config/awesome/themes/default/bg.png')
 --awesome.restart()
 --end
 --local function wall_menu()
 --local f = io.popen('ls -1 ' .. home_path .. '.config/awesome/wallpaper/')
 --for l in f:lines() do
--local item = { l, function () wall_load(l) end }
 --table.insert(wallmenu, item)
 --end
 --f:close()
 --end
 --wall_menu()

-- Widgets 

spacer       = wibox.widget.textbox()
spacer:set_text(' | ')

--Weather Widget
weather = wibox.widget.textbox()
vicious.register(weather, vicious.widgets.weather, "Weather: ${city}. Sky: ${sky}. Temp: ${tempc}c Humid: ${humid}%. Wind: ${windkmh} KM/h", 1200, "YMML")

--Battery Widget
--batt = wibox.widget.textbox()
--vicious.register(batt, vicious.widgets.bat, "Batt: $2% Rem: $3", 61, "BAT0")


-- {{{ Menu
-- Create a laucher widget and a main menu

menu_items = freedesktop.menu.new()
myawesomemenu = {
   { "manual", terminal .. " -e man awesome", freedesktop.utils.lookup_icon({ icon = 'help' }) },
   { "edit config", editor_cmd .. " " .. awesome.conffile, freedesktop.utils.lookup_icon({ icon = 'package_settings' }) },
   { "restart", awesome.restart, freedesktop.utils.lookup_icon({ icon = 'system-shutdown' }) },
   { "quit", awesome.quit, freedesktop.utils.lookup_icon({ icon = 'system-shutdown' }) }
       }

        table.insert(menu_items, { "Awesome", myawesomemenu, beautiful.awesome_icon })
        --table.insert(menu_items, { "Wallpaper", wallmenu, freedesktop.utils.lookup_icon({ icon = 'gnome-settings-background' })}) 

        mymainmenu = awful.menu({ items = menu_items, width = 150 })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- {{{ Wibox
-- Create a textclock widget
markup = lain.util.markup
blue   = beautiful.fg_focus
mytextclock = awful.widget.textclock()
lain.widgets.calendar:attach(mytextclock)

-- MPD
mpdicon = wibox.widget.imagebox(beautiful.play)
mpdwidget = lain.widgets.mpd({
    settings = function()
        if mpd_now.state == "play" then
            title = mpd_now.title
            artist  = " - " .. mpd_now.artist  .. markup("#333333", " |<span font='Tamsyn 3'> </span>")
            mpdicon:set_image(beautiful.play)
        elseif mpd_now.state == "pause" then
            title = "mpd "
            artist  = "paused" .. markup("#333333", " |<span font='Tamsyn 3'> </span>")
            mpdicon:set_image(beautiful.pause)
        else
            title  = ""
            artist = ""
            mpdicon:set_image()
        end

        widget:set_markup(markup(blue, title) .. artist)
    end
})

-- Create a wibox for each screen and add it
mywibox = {}
myinfowibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Widgets
    spacer       = wibox.widget.textbox()
    spacer:set_text(' | ')
    --
    --Weather Widget
    --
    weather = wibox.widget.textbox()
    vicious.register(weather, vicious.widgets.weather, "Weather: ${city}. Sky: ${sky}. Temp: ${tempc}c Humid: ${humid}%. Wind: ${windkmh} KM/h", 1200, "YMML")

    --Battery Widget
    batt = wibox.widget.textbox()
    vicious.register(batt, vicious.widgets.bat, "Batt: $2% Rem: $3", 61, "BAT0")
    -- Spacers
    volspace = wibox.widget.textbox()
    volspace:set_text(" ")

    spacer = wibox.widget.textbox(' ')
    small_spr = wibox.widget.textbox('<span font="Tamsyn 4"> </span>')
    bar_spr = wibox.widget.textbox('<span font="Tamsyn 3"> </span>' .. markup("#333333", "|") .. '<span font="Tamsyn 3"> </span>')

    -- {{{ BATTERY
    -- Battery attributes
    local bat_state  = ""
    local bat_charge = 0
    local bat_time   = 0
    local blink      = true

    -- Icon
    baticon = wibox.widget.imagebox()
    baticon:set_image(beautiful.widget_batfull)

    -- Charge %
    batpct = wibox.widget.textbox()
    vicious.register(batpct, vicious.widgets.bat, function(widget, args)
    bat_state  = args[1]
    bat_charge = args[2]
    bat_time   = args[3]

    --if args[1] == "-" then
        --if bat_charge > 70 then
        --widget:set_image(beautiful.widget_batfull)
        --elseif bat_charge > 30 then
        --widget:set_image(beautiful.widget_batmed)
        --elseif bat_charge > 10 then
        --widget:set_image(beautiful.widget_batlow)
        --else
        --widget:set_image(beautiful.widget_batempty)
        --end
    --else
        --baticon:set_image(beautiful.widget_ac)
        --if args[1] == "+" then
        --blink = not blink
        --if blink then
            --widget:set_image(beautiful.widget_acblink)
        --end
        --end
    --end

    return args[2] .. "%" .. bat_state ..  " (" .. bat_time .. ")"
    end, nil, "BAT0")

    -- Buttons
    function popup_bat()
    local state = ""
    if bat_state == "↯" then
        state = "Full"
    elseif bat_state == "↯" then
        state = "Charged"
    elseif bat_state == "+" then
        state = "Charging"
    elseif bat_state == "-" then
        state = "Discharging"
    elseif bat_state == "⌁" then
        state = "Not charging"
    else
        state = "Unknown"
    end

    naughty.notify { text = bat_state .. "Charge : " .. bat_charge .. "%\nState  : " .. state .. " (" .. bat_time .. ")", timeout = 5, hover_timeout = 0.5 }
    end
    batpct:buttons(awful.util.table.join(awful.button({ }, 1, popup_bat)))
    baticon:buttons(batpct:buttons())
    -- End Battery}}}
    --
    -- {{{ Start Battery Secondary
    batticon = wibox.widget.imagebox()
    batticon:set_image(beautiful.batt_charging)
    vicious.register(batticon, vicious.widgets.bat,
        function (widget, args)
            if (args[1] == "-") then
            widget:set_image(beautiful.batt_discharging_icon)
            else
            widget:set_image(beautiful.batt_charging_icon)
        end
        return ""
        end, 5, "BAT0"
    )
    
    battwidget = awful.widget.progressbar()
    battwidget:set_width(30)
    battwidget:set_height(10)
    --battwidget:set_vertical(true)
    --battwidget:set_background_color(beautiful.widget_background)
    battwidget:set_background_color("#00bfff")
    battwidget:set_border_color(nil)
    battwidget:set_color("#000000")
    vicious.register(battwidget, vicious.widgets.bat,
        function (widget, args)
            if(args[2] > 40) then
            battwidget:set_color("#000000")
            else
            battwidget:set_color("#000000")
            end
            return 100 - args[2]
        end, 5, "BAT0")

    -- }}} Batter, secondary
    -- {{{ PACMAN
    -- Icon
    pacicon = wibox.widget.imagebox()
    pacicon:set_image(beautiful.widget_pac)
    --
    -- Upgrades
    pacwidget = wibox.widget.textbox()
    vicious.register(pacwidget, vicious.widgets.pkg, function(widget, args)
    if args[1] > 0 then
    pacicon:set_image(beautiful.widget_pacnew)
    else
    pacicon:set_image(beautiful.widget_pac)
    end

    return args[1]
    end, 1801, "Arch S") -- Arch S for ignorepkg
    --
    -- Buttons
    function popup_pac()
    local pac_updates = ""
    local f = io.popen("pacman -Sup --dbpath /tmp/pacsync")
    if f then
    pac_updates = f:read("*a"):match(".*/(.*)-.*\n$")
    end
    f:close()
    if not pac_updates then
    pac_updates = "System is up to date"
    end
    naughty.notify { text = pac_updates }
    end
    pacwidget:buttons(awful.util.table.join(awful.button({ }, 1, popup_pac)))
    pacicon:buttons(pacwidget:buttons())
    -- End Pacman }}}
    --
    -- {{{ VOLUME
    -- Cache
    vicious.cache(vicious.widgets.volume)
    --
    -- Icon
    volicon = wibox.widget.imagebox()
    volicon:set_image(beautiful.widget_vol)
    --
    -- Volume %
    volpct = wibox.widget.textbox()
    vicious.register(volpct, vicious.widgets.volume, "♪$1%", nil, "Master")
    --
    -- Buttons
    volicon:buttons(awful.util.table.join(
        awful.button({ }, 1,
        function() awful.util.spawn_with_shell("amixer -q set Master toggle") end),
        awful.button({ }, 4,
        function() awful.util.spawn_with_shell("amixer -q set Master 3+% unmute") end),
        awful.button({ }, 5,
        function() awful.util.spawn_with_shell("amixer -q set Master 3-% unmute") end)
                ))
        volpct:buttons(volicon:buttons())
        volspace:buttons(volicon:buttons())
    -- End Volume }}}
    --
    -- {{{ Start CPU
    cpuicon = wibox.widget.imagebox()
    cpuicon:set_image(beautiful.widget_cpu)
    --
    cpu = wibox.widget.textbox()
    vicious.register(cpu, vicious.widgets.cpu, "All: $1% 1: $2% 2: $3% 3: $4% 4: $5%", 2)
    -- End CPU }}}
    --
    -- {{{ Start Mem
    memicon = wibox.widget.imagebox()
    memicon:set_image(beautiful.widget_ram)
    --
    mem = wibox.widget.textbox()
    vicious.register(mem, vicious.widgets.mem, "Mem: $1% Use: $2MB Total: $3MB Free: $4MB Swap: $5%", 2)
    -- End Mem }}}
    --
    -- {{{ Start Gmail 
    mailicon = wibox.widget.imagebox(beautiful.widget_mail)
    mailwidget = wibox.widget.textbox()
    gmail_t = awful.tooltip({ objects = { mailwidget },})
    vicious.register(mailwidget, vicious.widgets.gmail,
            function (widget, args)
            gmail_t:set_text(args["{subject}"])
            gmail_t:add_to_object(mailicon)
                return args["{count}"]
                    end, 120) 

        mailicon:buttons(awful.util.table.join(
            awful.button({ }, 1, function () awful.util.spawn("gnome-terminal -e mutt", false) end)
        ))
    -- End Gmail }}}
    --
    -- {{{ Start Wifi
    wifiicon = wibox.widget.imagebox()
    wifiicon:set_image(beautiful.widget_wifi)
    --
    wifi = wibox.widget.textbox()
    vicious.register(wifi, vicious.widgets.wifi, "${ssid} Rate: ${rate}MB/s Link: ${link}%", 3, "wlp3s0")
    -- End Wifi }}}
    

    -- From copland {{{
    -- Battery
    --
    baticon = wibox.widget.imagebox(beautiful.bat)
    batbar = awful.widget.progressbar()
    batbar:set_color(beautiful.fg_normal)
    batbar:set_width(55)
    batbar:set_ticks(true)
    batbar:set_ticks_size(6)
    batbar:set_background_color(beautiful.bg_normal)
    batmargin = wibox.layout.margin(batbar, 2, 7)
    batmargin:set_top(6)
    batmargin:set_bottom(6)
    batupd = lain.widgets.bat({
        settings = function()
            if bat_now.perc == "N/A" then
                bat_perc = 100
                baticon:set_image(beautiful.ac)
            else
                bat_perc = tonumber(bat_now.perc)
                if bat_perc > 50 then
                    batbar:set_color(beautiful.fg_normal)
                    baticon:set_image(beautiful.bat)
                elseif bat_perc > 15 then
                    baticon:set_image(beautiful.bat_low)
                else
                    batbar:set_color("#EB8F8F")
                    baticon:set_image(beautiful.bat_no)

                end

            end
            batbar:set_value(bat_perc / 100)
        end
    })
    batwidget = wibox.widget.background(batmargin)
    batwidget:set_bgimage(beautiful.widget_bg)


    -- ALSA volume bar
    volicon = wibox.widget.imagebox(beautiful.vol)
    volume = lain.widgets.alsabar({width = 55, ticks_size = 6,
    settings = function()
        if volume_now.status == "off" then
            volicon:set_image(beautiful.vol_mute)
        elseif volume_now.level == 0 then
            volicon:set_image(beautiful.vol_no)
        elseif volume_now.level <= 50 then
            volicon:set_image(beautiful.vol_low)
        else
            volicon:set_image(beautiful.vol)
        end
    end,
    colors = 
    {
        background = beautiful.bg_normal,
        mute = "#EB8F8F",
        unmute = beautiful.fg_normal
    }})
    volmargin = wibox.layout.margin(volume.bar, 2, 7)
    volmargin:set_top(6)
    volmargin:set_bottom(6)
    volumewidget = wibox.widget.background(volmargin)
    volumewidget:set_bgimage(beautiful.widget_bg)


    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mylauncher)
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])

    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    right_layout:add(spacer)
    --right_layout:add(mailicon)
    --right_layout:add(mailwidget)
    --right_layout:add(spacer)
    right_layout:add(batticon)
    right_layout:add(baticon)
    right_layout:add(batpct)
    right_layout:add(battwidget)
    --right_layout:add(spacer)
    --right_layout:add(pacicon)
    --right_layout:add(pacwidget)
    right_layout:add(spacer)
    right_layout:add(volicon)
    right_layout:add(volpct)
    right_layout:add(volspace)
    right_layout:add(spacer)
    right_layout:add(wifiicon)
    right_layout:add(wifi)
    right_layout:add(spacer)
    right_layout:add(mytextclock)
    right_layout:add(mylayoutbox[s])

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

   mywibox[s]:set_widget(layout)
   
   -- Create the bottom wibox
     --myinfowibox[s] = awful.wibox({ position = "bottom", screen = s })
   -- Widgets that are aligned to the bottom
    local bottom_layout = wibox.layout.fixed.horizontal()
    bottom_layout:add(cpuicon)
    bottom_layout:add(cpu)
    bottom_layout:add(spacer)
    bottom_layout:add(memicon)
    bottom_layout:add(mem)
    bottom_layout:add(spacer)
    bottom_layout:add(weather)
    bottom_layout:add(spacer)

 -- Now bring it all together 
    --local layout = wibox.layout.align.horizontal()
    --layout:set_bottom(bottom_layout)

    --myinfowibox[s]:set_widget(bottom_layout)

end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    -- Escape from keyboard focus trap (eg Flash plugin in Firefox)
    awful.key({ modkey, "Control" }, "Escape", function ()
         awful.util.spawn("xdotool getactivewindow mousemove --window %1 0 0 click --clearmodifiers 2")
    end),
   awful.key({ }, "Print", function () awful.util.spawn("scrot -e 'mv $f ~/Pictures/Screenshots/ 2>/dev/null'") naughty.notify({ preset = naughty.config.presets.normal,
                    title = "Screenshot taken!",
                    text =  "Saved in ~/Pictures/Screenshots." })
  end),
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ }, "Print", function () awful.util.spawn("upload_screens scr") end),
    -- Show Menu
    awful.key({ modkey }, "w",
        function ()
            mymainmenu:show({ keygrabber = true })
        end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    --awful.key({ modkey,           }, "Tab",
        --function ()
            --awful.client.focus.history.previous()
            --if client.focus then
                --client.focus:raise()
            --end
            --end),
    awful.key({ modkey,           }, "Tab",
        function ()
            -- awful.client.focus.history.previous()
            awful.client.focus.byidx(1)
            if client.focus then
                client.focus:raise()
            end
        end),

    awful.key({ modkey, "Shift"   }, "Tab",
        function ()
            -- awful.client.focus.history.previous()
            awful.client.focus.byidx(-1)
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey,           }, "c", function () awful.util.spawn(browser) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),
    awful.key({ modkey,           }, "w",     function () awful.util.spawn("luakit")    end, "Start Luakit Web Browser"),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end),
    awful.key({ modkey2,           }, "Tab",
        function ()
            -- awful.client.focus.history.previous()
            awful.client.focus.byidx(1)
            if client.focus then
                client.focus:raise()
            end
        end),
    awful.key({ modkey2, "Shift"   }, "Tab",
        function ()
            -- awful.client.focus.history.previous()
            awful.client.focus.byidx(-1)
            if client.focus then
                client.focus:raise()
            end
        end),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "t",      function (c) 
        if not c.titlebar then awful.titlebar.remove(c)
        else awful.titlebar.add(c, { modkey = modkey } ) end
    end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey, "Control" }, "Left",   function (c) c.maximized_vertical = not c.maximized_vertical            end),
    awful.key({ modkey, "Control" }, "Right",   function (c) c.maximized_horizontal = not c.maximized_horizontal            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber))
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "yakuake" },
      properties = { floating = true, ontop = true, fullscreen = true, border_width = 0 } }, 
    { rule = { class = "guake" },
      properties = {  ontop = true, border_width = 0 } }, 
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    { rule = { class = "chrome" },
      properties = { tag = tags[1][1] } },
    { rule = { class = "clementine" },
      properties = { tag = tags[1][3] } },
    { rule = { class = "VLC" },
      properties = { tag = tags[1][6] } },
    { rule = { class = "VirtualBox" },
      properties = { tag = tags[1][5] } },
    { rule = { class = "Gns3" },
      properties = { tag = tags[1][5] } },
    { rule = { class = "Bitcoin-qt" },
      properties = { tag = tags[1][9] } },
    { rule = { class = "luakit" },
      properties = { tag = tags[1][2] } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    c:connect_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end

    --local titlebars_enabled = true
    if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- Widgets that are aligned to the left
        titlebar_left_layout = wibox.layout.fixed.horizontal()
        titlebar_left_layout:add(awful.titlebar.widget.iconwidget(c))

        -- Widgets that are aligned to the right
        titlebar_right_layout = wibox.layout.fixed.horizontal()
        titlebar_right_layout:add(awful.titlebar.widget.floatingbutton(c))
        titlebar_right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        titlebar_right_layout:add(awful.titlebar.widget.stickybutton(c))
        titlebar_right_layout:add(awful.titlebar.widget.ontopbutton(c))
        titlebar_right_layout:add(awful.titlebar.widget.closebutton(c))

        -- The title goes in the middle
        titlebar_title = awful.titlebar.widget.titlewidget(c)
        titlebar_title:buttons(awful.util.table.join(
                awful.button({ }, 1, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.move(c)
                end),
                awful.button({ }, 3, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.resize(c)
                end)
                ))

        -- Now bring it all together
        titlebar_layout = wibox.layout.align.horizontal()
        titlebar_layout:set_left(titlebar_left_layout)
        titlebar_layout:set_right(titlebar_right_layout)
        titlebar_layout:set_middle(titlebar_title)

        awful.titlebar(c):set_widget(titlebar_layout)
    end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
--
-- Spawning yakuake here so that the compositor is now on.
awful.util.spawn_with_shell("yakuake &")
awful.util.spawn_with_shell("guake &")
